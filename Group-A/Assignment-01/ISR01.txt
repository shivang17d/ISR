Name : Shivang Gupta
Roll No : 3055
Class : BE-IT
Course : Information Storage Retrieval
Assignment No : 01

Problem Statement : Implement Conflation algorithm to generate document representative of a text file.


-------------------------------------------------------Program------------------------------------------------------------------------

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.*;
import java.nio.file.Files;
import java.nio.file.Path;

public class Conflation_Algo 
{

    static class Pair 
    {
        String word;
        int count;

        Pair(String word, int count) 
        {
            this.word = word;
            this.count = count;
        }
    }

    public static void removeStopWords(Map<String, Integer> map) throws Exception 
    {
        File myFile = new File("stopwords.txt");
        Set<String> set = new HashSet<>();
        BufferedReader br = new BufferedReader(new FileReader(myFile));
        String st = br.readLine();
        while (st != null) 
        {
            set.add(st);
            st = br.readLine();
        }
        for (String stopWord : set) 
        {
            map.remove(stopWord);
        }
    }

    public static void countWords(String text, Map<String, Integer> map) 
    {
        String tempText = text.toLowerCase();
        String[] skips = {".", ",", ":", ";", "'", "\"", "-"};
        for (String c : skips) 
        {
            if (c.equals("-")) 
            {
                tempText = tempText.replace(c, " ");
            } else {
                tempText = tempText.replace(c, "");
            }
        }
        for (String word : tempText.split(" ")) 
        {
            if (!map.containsKey(word)) 
            {
                map.put(word, 0);
            }
            map.put(word, map.get(word) + 1);
        }
    }

    public static void main(String[] args) throws Exception 
    {
    	System.out.println("\n***********OUTPUT************\n");
    	File myFile1 = new File("input.txt");
        BufferedReader br = new BufferedReader(new FileReader(myFile1));
        String text = br.readLine();
        
        
        /*Scanner input = new Scanner(System.in);
        System.out.println("\n**Enter your input : **\n\t\t");
        String text=input.nextLine();*/
        
        
        /*Path myFile1=Path.of("input.txt");
        String text=Files.readString(myfile1);*/
        
        /*String text = "Sometimes called Remote Wake-up, Wake on LAN is technology that allows someone to turn on a network computer remotely by sending a special data packet. Even if the computer is turned off, the network adapter is still listening on the network, so when the special packet arrives, the network adapter can turn on the computer progress.";*/

        Map<String, Integer> map = new HashMap<>();
        countWords(text, map);
        removeStopWords(map);

        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> (b.count - a.count));
        for (String key : map.keySet()) 
        {
            if (map.get(key) >= 2) 
            {
                pq.add(new Pair(key, map.get(key)));
            }
        }

        for (Pair p : pq) {
            System.out.println(p.word + " : " + p.count);
        }
    }
}



----------------------------------------------------OUTPUT--------------------------------------------------------------------------------

***********OUTPUT************

network : 4
turn : 2
computer : 3
wake : 2
adapter : 2
packet : 2
special : 2

